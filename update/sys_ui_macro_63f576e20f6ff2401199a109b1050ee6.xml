<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_macro">
    <sys_ui_macro action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>general</category>
        <description>To get Sections depending upon the ChangeTypeId.</description>
        <media_type/>
        <name>AMS_CreateDynamicFieldsForRFC</name>
        <scoped_name>x_138064_ams_AMS_CreateDynamicFieldsForRFC</scoped_name>
        <sys_class_name>sys_ui_macro</sys_class_name>
        <sys_created_by>madhav</sys_created_by>
        <sys_created_on>2017-06-27 13:23:12</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>63f576e20f6ff2401199a109b1050ee6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AMS_CreateDynamicFieldsForRFC</sys_name>
        <sys_package display_value="AMS" source="x_138064_ams">c370f2450f633200e1c38fbce1050e70</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AMS">c370f2450f633200e1c38fbce1050e70</sys_scope>
        <sys_update_name>sys_ui_macro_63f576e20f6ff2401199a109b1050ee6</sys_update_name>
        <sys_updated_by>madhav</sys_updated_by>
        <sys_updated_on>2017-06-27 13:23:12</sys_updated_on>
        <xml><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<j:jelly xmlns:j="jelly:core" xmlns:g="glide" xmlns:g2="null" xmlns:j2="null" trim="false">
<g:requires name="scripts/lib/jquery_includes.js"/>
<style>
      *{font-family: 'Roboto', sans-serif;}
  <!-- @keyframes click-wave {
    0% {
    height: 40px;
    width: 40px;
    opacity: 0.35;
    position: relative;
    }
    100% {
    height: 100px;
    width: 100px;
    margin-left: -40px;
    margin-top: -40px;
    opacity: 0;
    }
  }
  .heading{
      border-bottom:1px solid #cccccc;
      margin-bottom:20px;
  }
  .col-form-label{
      font-weight: bold;
      text-align:right;
  } -->
      <!--switch css start-->
      .switch-wrap{
	  display: flex;
	  align-items: center;
	  justify-content: space-around;
	  }
	  .switch{
	   background: #cccccc;
	   border-radius: 32px;
	   display: inline-flex;
	   align-items: center;
	   justify-content: center;
	   height: 20px;
	   position: relative;
	   width: 40px;
	   max-width: 110px;
	   margin: auto;
	  }
	  .switch-wrap label{
	   color: #747474;
	   font-size: 16px;
	   font-weight: 300;
	   line-height: 42px;
	  text-align:center;
	   top: 0;
	   text-transform: uppercase;
	   -webkit-transition: color .2s ease;
	   -moz-transition: color .2s ease;
	   -ms-transition: color .2s ease;
	   -o-transition: color .2s ease;
	   transition: color .2s ease;
	  }
	  .switch input {
	   height: 100%;
	   left: 0;
	   opacity: 0;
	   position: absolute;
	   top: 0;
	   width: 100%;
	   z-index: 2;
	  }
	  .switch input:checked~.switch-toggle {
	   left: 4px;
	  }
	  .switch input~:checked~.switch-toggle {
	   left: 22px;
	  }
	  .switch input:checked {
	   z-index: 0;
	  }
	  .switch-toggle{
	   background: #4a4a4a;
	   border-radius: 50%;

	   width: 15px; 
	   height: 15px;
	   left: 0;
	   position: absolute;
	   top: 3px;
	   -webkit-transition: left .2s ease;
	   -moz-transition: left .2s ease;
	   -ms-transition: left .2s ease;
	   -o-transition: left .2s ease;
	   transition: left .2s ease;
	   z-index: 1;
	  }
      <!--switch css end-->
      <!-- .justify-center{
      display:flex;
      justify-content:space-between;
      align-items:center;
  }
  td.justify-center{
    padding: 5px 10px;
  }
      .justify-center .radio{
        display:flex;
      }

  .option-input {
    -webkit-appearance: none;
    -moz-appearance: none;
    -ms-appearance: none;
    -o-appearance: none;
    appearance: none;
    position: relative;
    top: 0;
    right: 0;
    bottom: 0;
    left: 5px;
    height: 40px;
    width: 40px;
    transition: all 0.15s ease-out 0s;
    background: #cbd1d8;
    border: none;
    color: #fff;
    cursor: pointer;
    display: inline-block;
    margin-right: 0.5rem;
    outline: none;
    position: relative;
    z-index: 1000;
  }
  .option-input:hover {
    background: #9faab7;
  }
  .option-input:checked {
    background: #40e0d0;
  }
  .option-input:checked::before {
    height: 40px;
    width: 40px;
    position: absolute;
    content: 'âœ”';
    display: inline-block;
    font-size: 26.66667px;
    text-align: center;
    line-height: 40px;
  }
  .option-input:checked::after {
    -webkit-animation: click-wave 0.65s;
    -moz-animation: click-wave 0.65s;
    animation: click-wave 0.65s;
    background: #40e0d0;
    content: '';
    display: block;
    position: relative;
    z-index: 100;
  }
  .option-input.radio {
    border-radius: 50%;
  }
  .option-input.radio::after {
    border-radius: 50%;
  } -->
  .table>tbody .hidden-row {
    padding: 0 8px;
  }
  .bg-aws-color {
   background: #eee;  
  }
  
  .bottom-mymargin { margin-bottom:2%;}
	
	.tooltip {
    position: relative;
    display: inline-block;
    border-bottom: 1px dotted black;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* Position the tooltip */
    position: absolute;
    z-index: 1;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
}
	
	
</style>
<!-- for tooltips -->	
	<!--link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css"></link>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.1.0/js/tether.min.js"></script-->	
<!-- MomentJS Plugin -->
	
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.10/moment-timezone-with-data.js"></script>

<!-- Bootstrap Date-Picker Plugin -->
<!-- <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker3.min.css"/>
 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css" />	
<!--script type="text/javascript"  src="https://github.com/maxwells/bootstrap-tags/tree/master/dist/js/bootstrap-tags.js"></script>
<link rel="stylesheet" type="text/css" href="https://github.com/maxwells/bootstrap-tags/tree/master/dist/css/bootstrap-tags.css" /-->
	
<!-- Bootstrap Tags-Input Plugin -->
<link rel="stylesheet" href="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.css"/>
<script src="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"></script>

<div id="bodyDiv" class="container-fluid" style="text-align: left; padding:25px;margin:25px;"/>
<script>
  var $snowJQ = jQuery.noConflict();
 <!-- ********* Function to remove the Dynamic Fields from the main RFC Form ******* -->  
    function hideUIMacro(){
		try {
		  $snowJQ("#bodyDiv").empty();//$snowJQ("dynForm").remove();
		}
		catch(err) {
		  //console.log('Nothing to remove ' + err.message);
		} 
  }
<!-- ******** Function to get the Dynamic fields using changeyeId ******** -->
function getFieldsToCreateDynamicForm(id){
  var ga = new GlideAjax('AMS_GetRFCFormFields');
  ga.addParam('sysparm_name', 'getFields');
  ga.addParam('sysparm_changeTypeId', id);
  ga.getXMLWait();
  var res = ga.getAnswer();
  var params = JSON.parse(res);
  buildHtmlTable(params,id);
  <!-- var bodyContainer = document.createElement("div");
  bodyContainer.setAttribute("id" , "bodyDiv" );
  bodyContainer.setAttribute("class", "container-fluid"); -->
  <!-- div id="bodyDiv" style="text-align: left; padding:25px;margin:25px;" /-->
  
  <!-- setTimeout(function(){ 
    showOrHideHeaders(id);
  },5000); -->
}
	
function prepareArrayInputs(){
	var allTagsInputs = $snowJQ("input[data-role='tagsinput']");
	allTagsInputs.tagsinput({
        tagClass: 'label label-default',
        trimValue: true,
		confirmKeys: [13] // enter ONLY, not comma
      });
	allTagsInputs.on('itemAdded', function(event) {
		// event.item: contains the item
        //console.log('Added=' + event.item + ' to ' + event.target.name );
		var isValid = validateArrays(event.target);
		if (!isValid){
			//console.log(event.target.name + ' invalid due to ' + event.target.validationMessage);
			var errMessage = event.target.validationMessage;
			if(event.target.getAttribute("pattern")) errMessage = "Please match pattern " +  event.target.getAttribute("pattern");
			event.target.parentElement.parentElement.classList.add('bg-danger');
			var dangerText = event.target.parentElement.parentElement.getElementsByClassName("text-danger");
			if(dangerText.length > 0 ) {
				dangerText[0].innerHTML = errMessage;
				dangerText[0].style.display = 'block';
			}
		} else {
			event.target.parentElement.parentElement.classList.remove('bg-danger');
			var dangerText = event.target.parentElement.parentElement.getElementsByClassName("text-danger");
			if(dangerText.length > 0 ) {
				dangerText[0].innerHTML = '';
				dangerText[0].style.display = 'none';
			}   
		}
        //console.log('Value=' + $('input').val());
		updateRfcJsonValues();
      });
	allTagsInputs.on('itemRemoved', function(event) {
		// event.item: contains the item
		//console.log('Removed=' + event.item + '- from ' + event.target );
		var isValid = validateArrays(event.target);
		if (!isValid){
			var errMessage = event.target.validationMessage;
			if(event.target.getAttribute("pattern")) errMessage = "Please match pattern " +  event.target.getAttribute("pattern");
			event.target.parentElement.parentElement.classList.add('bg-danger');
			var dangerText = event.target.parentElement.parentElement.getElementsByClassName("text-danger");
			if(dangerText.length > 0 ) {
				dangerText[0].innerHTML = errMessage;
				dangerText[0].style.display = 'block';
			} 
		} else {
			event.target.parentElement.parentElement.classList.remove('bg-danger');
			var dangerText = event.target.parentElement.parentElement.getElementsByClassName("text-danger");
			if(dangerText.length > 0 ) {
				dangerText[0].innerHTML = '';
				dangerText[0].style.display = 'none';
			}   
		}
		updateRfcJsonValues();
	});
	for (var i = 0; allTagsInputs.length > i ; i++) {
		allTagsInputs[i].onblur = updateRfcJsonValues();
	}
    //$snowJQ('[data-toggle="tooltip"]').tooltip()
	<!-- .on('mouseover', function() {
		$snowJQ(this).tooltip('show');
	 })
	.on('mouseout', function() {
		$snowJQ(this).tooltip('hide');
	 })
	 .tooltip({
		trigger: 'manual',
		container: 'body'
	 })
	.on('hide.bs.tooltip', function () {
	  // do somethingâ€¦
		console.log('Something hid the tooltip');
	    console.log($snowJQ(this));
	    $snowJQ(this).show();
	}) -->
	;
}	
<!-- ********** Function for date picker  ********  -->
function prepareSelectPickers(){
  var allSelectPickers = $snowJQ('#bodyDiv').find('select');
  for (var i =0; allSelectPickers.length > i ; i++){
    if (allSelectPickers[i].id != "") {
      $snowJQ('#' + allSelectPickers[i].id + '')
      .selectpicker({
        liveSearch: true,
        liveSearchStyle: "contains",
        actionsBox: true,
        showTick: true
      });   
    }
  }
}
  
function prepAllRequiredInputs() {
  var requiredIDs = document.querySelectorAll(".requiredID");
  for (var i = 0; requiredIDs.length > i; i++) {
    var inputVar = requiredIDs[i].querySelectorAll('input, textarea, select, radio');
    if (inputVar.length >0 ) {
      inputVar[0].setAttribute("required", "required");
    }
  }
}
<!-- ******* Function to validate all the mandatory fields  ******** -->
function validateAllRequiredInputs(){
  // no matter what - make sure that the requested start/endtime is at least 10 mins from NOW else it will fail
  var requestedStartTime = moment(document.getElementById("requestedStartTime").value);
  var submissionTime = moment();
  var duration = moment.duration(requestedStartTime.diff(submissionTime));
  console.log('duration.asMinutes() = ' + duration.asMinutes());
  if(10 > duration.asMinutes()){ // cannot submit this data
	totalInvalidCount += 1;
	var item = document.getElementById("requestedStartTime");
	item.parentElement.parentElement.classList.add('bg-danger');
	var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
	if(dangerText.length > 0 ) {
		dangerText[0].innerHTML = "The start date must be at least 10 minutes from now";
		dangerText[0].style.display = 'block';
	}    
  } else {
		var item = document.getElementById("requestedStartTime");
		item.parentElement.parentElement.classList.remove('bg-danger');
		var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
		if(dangerText.length > 0 ) {
		dangerText[0].innerHTML = "";
		dangerText[0].style.display = 'none';
		}   
	}
  if(document.getElementById("asapOption").checked){
	// force the start time to now
	var newDate = moment().add(15,"m");
	document.getElementById("requestedStartTime").value =  moment.utc(newDate).toISOString();
	newDate.add(1,'days');
	document.getElementById("requestedEndTime").value = moment.utc(newDate).toISOString();
			
  }
	
  //var requiredIDs = document.querySelectorAll(".requiredID");
  //var requiredIDs = document.querySelectorAll('[required="required"]');
  var requiredIDs = document.querySelectorAll("div.parameters, div.properties");
  //console.log('allIDs = ' + requiredIDs.length);
  var emptyFieldMap={};
  emptyFieldMap["isValid"] = false; 	
  if(requiredIDs.length == 0) {
	// The form hasn't been built yet.
	return emptyFieldMap;
  } 	
  var totalInvalidCount = 0;
  for (var i = 0; requiredIDs.length > i; i++) {
    var inputVar = requiredIDs[i].querySelectorAll('input, textarea, select, radio');
	
    //if (inputVar.length >0 ) {  
	  //console.log('inputVar length = ' + inputVar.length);
	  for(var j = 0 ; inputVar.length > j; j++){
		//console.log(' id = ' + inputVar[j].id);
	    var item = inputVar[j];
      // the tagsinput inputs do not have a name..those need to be ignored.
	  if (item.name != '') { // item usually has the only element under this div unless it is keypairs.. 
		  //console.log('Checking ' + item.id );
		  
		  // ignore these as these are made up select boxes.. don't proceed.
		  if (item.id.indexOf('-select') != -1) break;
	      
		  // if inputVar has a pattern defined, this gets funky, so try that first.
		  
		  var patte = item.getAttribute("pattern");
		  if (patte) {
			if (!item.value == '') {
				var patt = new RegExp(item.getAttribute("pattern"));
				var res = patt.test(item.value);
				if (!res) {
					//console.log(item.name + ' is invalid due to ' + item.getAttribute("pattern"));
					totalInvalidCount += 1;
					item.parentElement.parentElement.classList.add('bg-danger');
					var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
					if(dangerText.length > 0 ) {
						dangerText[0].innerHTML = "Please match pattern " + item.getAttribute("pattern");
						dangerText[0].style.display = 'block';
					}    
					
				} else {
						item.parentElement.parentElement.classList.remove('bg-danger');
						var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
						if(dangerText.length > 0 ) {
							dangerText[0].innerHTML = "";
							dangerText[0].style.display = 'none';
						}   
					}
				
			} else {
					// check if it was also required
					if (item.getAttribute("required") == "required") {
						//console.log(item.name + ' is invalid due to REQUIRED' );
						totalInvalidCount += 1;
						item.parentElement.parentElement.classList.add('bg-danger');
						var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
						if(dangerText.length > 0 ) {
							dangerText[0].innerHTML = item.name + " is required";
							dangerText[0].style.display = 'block';
						}    
					} else {
						item.parentElement.parentElement.classList.remove('bg-danger');
						var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
						if(dangerText.length > 0 ) {
							dangerText[0].innerHTML = "";
							dangerText[0].style.display = 'none';
						} 
					}
				}
	
			if (totalInvalidCount > 0) {
					
				}
				
		  } else if (!item.checkValidity()){
				var errMessage = item.validationMessage;
				if(errMessage == '' || item.validity.valueMissing ) {
					errMessage = item.name + " is required"
				}
				//console.log(item.name + ' is invalid due to ' + errMessage);
				totalInvalidCount += 1;
				//emptyFieldMap["isValid"] = false; 
				//emptyFieldMap["fieldName"] = inputVar.getAttribute("name");

				item.parentElement.parentElement.classList.add('bg-danger');
				var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
				if(dangerText.length > 0 ) {
					dangerText[0].innerHTML = errMessage;
					dangerText[0].style.display = 'block';
				}        
			//return emptyFieldMap;
		  } else { // even if it is valid, we could have tagsinputs or readonly ones that seem valid
			if(item.value == '' ){
				// is it a required field ?
				if(item.required){
					// that's a problem
					//console.log(item.name + ' is invalid due to ' + item.name + ' is required');
					totalInvalidCount += 1;
					//emptyFieldMap["isValid"] = false; 
					//emptyFieldMap["fieldName"] = inputVar.getAttribute("name");

					item.parentElement.parentElement.classList.add('bg-danger');
					var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
					if(dangerText.length > 0 ) {
						dangerText[0].innerHTML = inputVar[0].name + " is required";
						dangerText[0].style.display = 'block';
					}        
					
				} else {
						//console.log(item.name + ' is valid ');
						item.parentElement.parentElement.classList.remove('bg-danger');
						var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
						if(dangerText.length > 0 ) {
							dangerText[0].innerHTML = "";
							dangerText[0].style.display = 'none';
						}    
				}
			} else { //even if there is a value but if it is a readyonly array field, we have to validate array
				//var isValid = false;
				if(item.getAttribute('type') == 'array'){
					var isValid = validateArrays(item);
					if (isValid){
						//console.log(item.name + ' is valid array');
						item.parentElement.parentElement.classList.remove('bg-danger');
						var dangerText = item.parentElement.parentElement.getElementsByClassName("text-danger");
						if(dangerText.length > 0 ) {
							dangerText[0].innerHTML = "";
							dangerText[0].style.display = 'none';
						} 
					} else {
						//console.log(item.name + ' is valid array');
						totalInvalidCount += 1;
					}
				}
				 
			}
			     
			//emptyFieldMap["isValid"] = true;
		  }
	  }
	}

    //}
  }
	
	var tagz = document.getElementById("HiddenTags");
	<!--  Try block for checking the value in HiddenTags -->
      try{
		if(tagz){
			if (tagz.value) {
            var tmpArr = (JSON.parse(tagz.value)).tmpArr;
			// first check if all key values have been filled out
            for(var i=0; tmpArr.length > i;i++){
              if(Object.keys(tmpArr[i]).length>0){
              Object.keys(tmpArr[i]).forEach(function(key) {
                if(!tmpArr[i][key]){
					//console.log("No value for " + key + " in Tags");
                    isValid= false;
                    return isValid;
                  }
                });
                if(!isValid){
                  break;
                  }
              }
            }
			// now check if they are duplicates
			var tmpTags=[];
			for (var i = 0; tmpArr.length > i; i++){
			  tmpTags.push(tmpArr[i]["Key"] + tmpArr[i]["Value"] );
			}
			//console.log(tmpTags);
			var counts = [];
			for(var i = 0; tmpTags.length > i; i++) {
				if(counts[tmpTags[i]] === undefined) {
					counts[tmpTags[i]] = 1;
					tagz.parentElement.classList.remove("bg-danger");
					tagz.nextSibling.innerHTML='';
					tagz.nextSibling.style.display = 'none';
				} else {
					//console.log('duplicate key values found' + JSON.stringify(tmpTags));
					tagz.parentElement.classList.add("bg-danger");
					tagz.nextSibling.innerHTML='Please use unique key value pairs';	
					tagz.nextSibling.style.display = 'block';
					totalInvalidCount += 1;
				}
			}
          }
		}
          
      }catch(err){
        //console.log("Error = "+err.message);
      } 
	  <!-- if(document.getElementById("timeDIV").className.includes("bg-danger")){
		alert("The Time format is invalid");
		return false;
	  } -->
  if (totalInvalidCount == 0 ) { emptyFieldMap["isValid"] = true; }
  //console.log('totalInvalidCount = ' + totalInvalidCount);
  //console.log('emptyFieldMap = ' + JSON.stringify(emptyFieldMap) );	
	
  return emptyFieldMap;
}
<!-- ******* Function to get all the dynamic created field values which is called from client script ***** -->
function getValues() {
     var executionparameters_properties={};
     var executionparameters_params={};
     var fieldMap={};
  <!-- Get all the required field values whose class name is div.parameters -->
         var parametersIDs = document.querySelectorAll("div.parameters");
      for (var i = 0; parametersIDs.length > i; i++) {
         var inputVar = parametersIDs[i].querySelectorAll('input, textarea, select, radio');
         if (inputVar.length > 0 ) {   
           if(inputVar[0].value) { 
             if(inputVar[0].getAttribute("name") ) {
				//console.log('Value of ' + inputVar[0].name + ' is ' + inputVar[0].value);
				executionparameters_params[inputVar[0].getAttribute("name")] = getInputType(inputVar[0].value, inputVar[0].getAttribute("paramType"));
			 }
			} else if(inputVar[1]) {
				// this could be because of the array ones try [1]
				if(inputVar[1].value) { 
				 if(inputVar[1].getAttribute("name") ) {
					//console.log('Value of ' + inputVar[1].name + ' is ' + inputVar[1].value);
					executionparameters_params[inputVar[1].getAttribute("name")] = getInputType(inputVar[1].value, inputVar[1].getAttribute("paramType"));
				 }
				}
				
			} else {
				//console.log(inputVar[0].name + ' has no value');
			}
				
         } 
      }
      <!-- Get all the other field values whose class name is div.properties --> 
      var propertiesIDs = document.querySelectorAll("div.properties");
      for (var i = 0; propertiesIDs.length > i; i++) {
         var inputVar = propertiesIDs[i].querySelectorAll('input, textarea, select, radio');
         if (inputVar.length > 0 ) {   
           if(inputVar[0].value) { 
             if(inputVar[0].getAttribute("name") ) {
				//console.log('Value of ' + inputVar[0].name + ' is ' + inputVar[0].value);
				executionparameters_properties[inputVar[0].getAttribute("name")] = getInputType(inputVar[0].value, inputVar[0].getAttribute("paramType"));
			 }
			} else if(inputVar[1]) {
				// this could be because of the array ones try [1]
				if(inputVar[1].value) { 
				 if(inputVar[1].getAttribute("name") ) {
					//console.log('Value of ' + inputVar[1].name + ' is ' + inputVar[1].value);
					executionparameters_properties[inputVar[1].getAttribute("name")] = getInputType(inputVar[1].value, inputVar[1].getAttribute("paramType"));
				 }
				}
				
			} else {
				//console.log(inputVar[0].name + ' has no value');
			}
				
         } 
      }
       
      executionparameters_properties["requestedStartTime"] = (document.getElementById("requestedStartTime").value);<!-- Add Requested start and end time -->
      executionparameters_properties["requestedEndTime"] = (document.getElementById("requestedEndTime").value);
      var tagz = document.getElementById("HiddenTags");
<!--  Try block for checking the value in HiddenTags -->
      try{
          if (tagz.value) {
            var tmpArr = (JSON.parse(tagz.value)).tmpArr;
            executionparameters_properties["Tags"] = tmpArr;
          }
      }catch(err){
        //console.log("Error = "+err.message);
      }
      executionparameters_properties["Parameters"] = executionparameters_params;
      return trimEmptyValues(executionparameters_properties) ;
}
<!-- ******* Function to convert the value according to the input type  *****  -->
function getInputType(value, valuetype) {
    if (valuetype === "array"){
      var tmp = value.split(',');
      if(!Array.isArray(tmp)) tmp = tmp.push(value);
      return tmp;
    } else if (valuetype === "number"){
      return parseFloat(value);
    } else if (valuetype === "boolean"){
      return (value == "true");
    } else if (valuetype === "string"){
      return value;
    } else if (valuetype === "integer"){
      return parseInt(value);
    } else {
      return value;
    }
} 
  
  <!-- ****** Function to remove empty spaces in each values fetched from the fields ******  -->
function trimEmptyValues(obj){
 var propNames = Object.getOwnPropertyNames(obj);
  for (var i = 0; propNames.length > i; i++) {
    var propName = propNames[i];
    if (obj[propName] === null || obj[propName] === undefined || obj[propName] === "") {
      delete obj[propName];
    } else if (typeof(obj[propName]) === "object"){
        trimEmptyValues((obj[propName]));
      }
  }
  return obj;
}
<!-- ***** Function to create the date in the Date and Time picker ***** -->
function createDate(){
    var dateChosen = $snowJQ('#datePicker').datepicker('getDate');
    var timeChosen = $snowJQ("#time").val().split(":") ;
    var timezoneChosen = $snowJQ("#timezones").val() ;
    if (!dateChosen) {
      // force current date
      dateChosen = moment();
      dateChosen.hour(timeChosen[0]);
      dateChosen.minute(timeChosen[1]);
    } else {
      dateChosen.setHours(timeChosen[0]);
      dateChosen.setMinutes(timeChosen[1]);
    }
    
    var myDateTime = moment(dateChosen).format();
    myDateTime = myDateTime.split('+')[0];
    var finalDateChosen = moment.tz(myDateTime, timezoneChosen);
    finalDateChosen.format();
    var finalDateUTC = moment.utc(finalDateChosen);
    $snowJQ("#requestedStartTime").val(finalDateUTC.toISOString());
    var finalEndDataChosen = finalDateUTC.add(1,'days');
    $snowJQ("#requestedEndTime").val(finalEndDataChosen.toISOString()); 
    //console.log('finalDateUTC.toISOString() ' + finalDateUTC.toISOString());
    //console.log('finalEndDataChosen.toISOString() ' + finalEndDataChosen.toISOString());
    //console.log(' val ' + $snowJQ("#requestedStartTime").val());

}
<!-- ****** Function to create current date ****** -->
function prepareDateTimePicker(){
    <!-- var container=$snowJQ('.dynForm').length>0 ? $snowJQ('.dynform').parent() : "body";
    var now = moment().add(15,'m').format("HH:mm");
    var currDate = moment().toString();
    $snowJQ('#time')
    .on("keyup", function(e){
      var key=String.fromCharCode(e.keyCode);
      var value=$snowJQ(this).val();
        if(value.length==2)$snowJQ(this).val($snowJQ(this).val()+':');
    })
    .on("change", function(e){
      var patt = new RegExp("^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$");
      var res = patt.test(e.target.value);
      if(res) {
        $snowJQ('#time').parent().parent().removeClass("bg-danger");
        $snowJQ("#time").parent().next().hide();
        createDate();
        updateRfcJsonValues()
      } else {
        $snowJQ('#time').parent().parent().addClass('bg-danger');
        $snowJQ("#time").parent().next().show();
      }

    })
    $snowJQ("#time").attr("placeholder" , now);
    $snowJQ("#time").val(now);
    
    var timezoneNames = moment.tz.names();
    var x = document.getElementById("timezones");
    
    for (var i = 0; timezoneNames.length > i; i++) {
      var option = document.createElement("option");
      option.text = timezoneNames[i];
      option.value = timezoneNames[i];
      x.add(option);
      }     
    
    $snowJQ("#timezones option[value= '" + moment.tz.guess() + "'] ").attr("selected" , "selected");
    var tmp = $snowJQ("#timezones").find(":selected").text();
    
    $snowJQ('#timezones')
    .on("change", function(e){createDate();updateRfcJsonValues()})
    
    $snowJQ('#datePicker')
    .datepicker({
            format: 'yyyy/mm/dd',
      container: container,
      todayHighlight: true,
      autoclose: true,
      startDate: '+0d',
      todayBtn:true
        })
    .on('changeDate', function(e) {
      createDate();
      updateRfcJsonValues();
        })
        .on('hide',function(){ 
      var a = $snowJQ(this);
      setTimeout(function(){a.show();},2);
    });
    //console.log('currDate is ' + currDate);
    $snowJQ('#datePicker').datepicker('setDate', currDate);
    var setVal = $snowJQ("#datePicker").datepicker('getDate');
    //console.log ('setVal = ' + setVal);
    $snowJQ("#startDate").val(currDate);
    createDate(); -->
	var timezoneNames = moment.tz.names();
    var x = document.getElementById("timezones");
    
    for (var i = 0; timezoneNames.length > i; i++) {
      var option = document.createElement("option");
      option.text = timezoneNames[i];
      option.value = timezoneNames[i];
      x.add(option);
    }     
    
    $snowJQ("#timezones option[value= '" + moment.tz.guess() + "'] ").attr("selected" , "selected");
    var tmp = $snowJQ("#timezones").find(":selected").text();
    
    $snowJQ('#timezones')
    .on("change", function(e){
		printDate(moment.tz(document.getElementById('startDate').value, 'MM-DD-YYYY H:mm A', this.value) );
		updateRfcJsonValues();
	});
	
	//set a date to use
    var newDate = moment().tz(x.value).add(15,"m");
	$snowJQ(function () {
		$snowJQ('#datePicker')
		.datetimepicker({
			useCurrent : true,
			showTodayButton : true,
			//locale : moment().tz(x.value),
			minDate : moment().add(15,"m"),           		
		})
		.on("dp.change", function(e) {
			if(!e.date) {
			var newDate = moment().tz(x.value).add(15,"m");//.format();
			console.log('Cannot delete date.... Setting to ' + newDate);
			$snowJQ('#datePicker').data("DateTimePicker").date(newDate);
			$snowJQ('#datePicker').data("DateTimePicker").show();
		} else {
			newDate = moment(e.date).tz(document.getElementById("timezones").value);//.format();
			console.log('Changed new date to...' + newDate);	
		}

			printDate(newDate);

		})
		// .on("dp.show", function(e) {
		// 		console.log('Creating new date on show');
		// 		var newDate = moment(e.date).tz(x.value).add(15,"m").format();
		// 		printDate(newDate);	           		
		// 		console.log('Creating new date on show-----------');	           		
		// })
	;
	});
		console.log('Creating new date on page load');
		printDate(newDate);
		console.log('Creating new date on page load----------');
  }

	function printDate(in_newDate){
        	console.log('newDate ' + in_newDate.format());
        	var newDate;
        	if(in_newDate === 'Invalid date'){
        		console.log('Received invalid newDate');
        		newDate = moment().tz(document.getElementById("timezones").value).add(15,"m").format();
           		printDate(newDate);
        	} else if (!in_newDate) {
        		newDate = moment($snowJQ('#datePicker').data("DateTimePicker").date()).tz(document.getElementById("timezones").value);
        		console.log('Datepicker date was ' + $snowJQ('#datePicker').data("DateTimePicker").date().format() + 
        			' timezone was ' + document.getElementById("timezones").value);
        		console.log('Received no newDate. Setting it to ' + newDate.format());
        			
        	// 	printDate(newDate);
        	} else {
        		newDate = moment(in_newDate);
        	}
        	document.getElementById('datePicker').value = newDate.format();
       		//var requestedStartTime = newDate ;
			document.getElementById("requestedStartTime").value =  moment.utc(newDate).toISOString();
       		//var requestedEndTime = newDate.add(1,'days');
			
       		//var requestedStartTimeUTC = moment.utc(requestedStartTime);
       		//var requestedEndTimeUTC = moment.utc(requestedEndTime);
			newDate.add(1,'days');
			document.getElementById("requestedEndTime").value = moment.utc(newDate).toISOString();
			
       		//console.log('requestedStartTime ' + requestedStartTime.format());
       		//console.log('requestedEndTime ' + requestedEndTime.format());
       		console.log('datePicker set to ' + document.getElementById('datePicker').value);
       		console.log('requestedStartTimeUTC set to ' + document.getElementById("requestedStartTime").value);
       		console.log('  requestedEndTimeUTC set to ' + document.getElementById("requestedEndTime").value);
			updateRfcJsonValues();
        }
	
<!-- *** Function to update the RFC JSON field value  **** -->
  function updateRfcJsonValues(){
    var rfcJson = {};
    rfcJson["executionParameters"] = getValues();
    (document.getElementById("rfcJson")).value = JSON.stringify(rfcJson); 
  }
    
  function addIds(componentID, id){
    var component=document.getElementById(componentID.name).value;
    if(component){
        if(component.include(id)){
          //alert(id+" already added!!");
            return;
          }
        else{
          if(componentID.name.include("Subnet") || componentID.name=="StackIds"){
            document.getElementById(componentID.name).value=component+","+id;
          }else{
            document.getElementById(componentID.name).value=id;
          }
        }
  }
  else{
      document.getElementById(componentID.name).value=id;
    }
  }
<!-- ***** Function to clear the selected values from the drop-down ***** -->
  function clearAll(nodeName){
  var component=document.getElementById(nodeName).value;
  if(nodeName){
    document.getElementById(nodeName).value="";
    document.getElementById(nodeName+"-select").selectedIndex = 0;
  return null;
  }
  }
  
  <!-- **** Function to check the Time in start time  schedule section ****  -->
    function checkDate(scheduleTime){
      var el = document.getElementById('time').placeholder;
      var selectedTime = document.getElementById('time').value;
      if(selectedTime>el){
        return true;
      }else{
        
        document.getElementById('time').value = el;
        return false;
      } 
    }
  
  
<!-- ***** Function to validate the given field(item) value using pattern ***** -->
  function validate(item) {
    <!--**If HTML5 input pattern mismatch check fails **-->
    item.parent().parent().removeClass('bg-danger');
    item.parent().parent().children('#helptext').hide();
    var errMessage = "";
    try{
      var isValid = item[0].checkValidity();
      if(!isValid) {
  <!-- ****If pattern check fails ****-->
        
        var patte = item[0].getAttribute("pattern");
        if(patte){
          var patt = new RegExp(item[0].getAttribute("pattern"));
          var res = patt.test(item[0].value);
          if(!res) { 
            errMessage = "Please match pattern " + item[0].getAttribute("pattern");
            item.parent().parent().addClass('bg-danger');
            item.parent().parent().children('#helptext').html(errMessage); 
            item.parent().parent().children('#helptext').show();
          } else { // could be errors due to the rest item[0].validity.patternMismatch will STILL be true.
            if( item[0].validity.valueMissing){
                errMessage = item[0].name + " is required.";
            } else if( item[0].validity.stepMismatch){
                errMessage = "Sorry, only 2 digits are allowed after the decimal.";
            } else if( item[0].validity.tooShort){
                errMessage = "Min length is " + item[0].minLength;
            } else if ( item[0].validity.tooLong){
                errMessage = "Max length is " + item[0].maxLength;
            } else if ( item[0].validity.rangeOverflow) {
                errMessage = "Max value is " + item[0].max;
            } else if( item[0].validity.rangeUnderflow) {
                errMessage = "Min value is " + item[0].min;
            } else if( item[0].validity.patternMismatch) {
                errMessage = ""; // forcefully blank this out AND remove error bg

            }
            if (errMessage === "") {
              // forcefully ignore
              item.parent().parent().removeClass('bg-danger');
              item.parent().parent().children('#helptext').hide();  
            } else {
              item.parent().parent().addClass('bg-danger');
              item.parent().parent().children('#helptext').html(errMessage);
              item.parent().parent().children('#helptext').show();
            }
          }
        } else {
            if( item[0].validity.valueMissing){
                errMessage = item[0].name + " is required.";
            } else if( item[0].validity.stepMismatch){
                errMessage = "Sorry, only 2 digits are allowed after the decimal.";
            } else if( item[0].validity.tooShort){
                errMessage = "Min length is " + item[0].minLength;
            } else if ( item[0].validity.tooLong){
                errMessage = "Max length is " + item[0].maxLength;
            } else if ( item[0].validity.rangeOverflow) {
                errMessage = "Max value is " + item[0].max;
            } else if( item[0].validity.rangeUnderflow) {
                errMessage = "Min value is " + item[0].min;
            } else if( item[0].validity.patternMismatch) {
                errMessage = ""; // forcefully blank this out AND remove error bg

            }
            if (errMessage === "") {
              // forcefully ignore
              item.parent().parent().removeClass('bg-danger');
              item.parent().parent().children('#helptext').hide();  
            } else {
              item.parent().parent().addClass('bg-danger');
              item.parent().parent().children('#helptext').html(errMessage);
              item.parent().parent().children('#helptext').show();
            }
            <!-- errMessage = item[0].id+" must be lower or equal to "+item[0].max;
            item.parent().parent().addClass('bg-danger');
            item.parent().parent().children('#helptext').html(errMessage); 
            item.parent().parent().children('#helptext').show(); -->
        }
      } else {
          item.parent().parent().removeClass('bg-danger');
          item.parent().parent().children('#helptext').hide();
          updateRfcJsonValues();
    } 
  }catch (err){
      //console.log('Could not apply bg-danger to the row');
      //console.log(err);
    }
}
<!-- ***** Function to validate the array field type ***** -->
function validateArrays(inboundItem){ 
  var item = document.getElementById(inboundItem.name);
  var valueOfItem = item.value;
  if(!valueOfItem.length > 0){
	item.parentElement.parentElement.classList.remove('bg-danger');
    item.parentElement.parentElement.querySelector("#helptext").style.display = 'none';
    return true;
  }
	
  var items = valueOfItem.split(',');
  
  var minItems = item.getAttribute("minItems");
  var maxItems = item.getAttribute("maxItems");
  var errMessage = item.validationMessage;
  if(item.getAttribute("pattern")){
    for(var i=0; items.length>i ; i++){
      var re = new RegExp(item.getAttribute("pattern"));
      if(!re.test(items[i])) {
          errMessage = "Please match pattern " + item.getAttribute("pattern");
          item.parentElement.parentElement.classList.add('bg-danger');
          item.parentElement.parentElement.querySelector("#helptext").innerHTML=errMessage;
          item.parentElement.parentElement.querySelector("#helptext").style.display = 'block';
          return false;
        } else {
          item.parentElement.parentElement.classList.remove('bg-danger');
          item.parentElement.parentElement.querySelector("#helptext").style.display = 'none';
        }
    }
  }
  if (!minItems) minItems = -1; <!-- **** if no minimum value **** -->
  if (!maxItems) maxItems = Infinity; <!-- **** if no maximum value  *** -->
  
  if ( minItems > items.length || items.length > maxItems){
    item.parentElement.parentElement.classList.add('bg-danger');
    errMessage = "Total items must be between min " + minItems + " and max " + maxItems;
    item.parentElement.parentElement.querySelector("#helptext").innerHTML=errMessage;
    item.parentElement.parentElement.querySelector("#helptext").style.display = 'block';  
    return false;
  } else {
    item.parentElement.parentElement.classList.remove('bg-danger');
    item.parentElement.parentElement.querySelector("#helptext").style.display = 'none';
    return true;
  }
}
<!-- ***** Function to validate all the fields  ***** -->
function validateAll(){
  var isValid = true;
  <!--  var allItems = document.querySelectorAll("div.parameters, div.properties");
  for (var i = 0; allItems.length > i; i++) {
    var inputVar = allItems[i].querySelectorAll('input, textarea, select, radio');
    if (inputVar.length >0 ) {    
      isValid = inputVar[0].checkValidity();
      if(!isValid) {
        inputVar[0].parentElement.parentElement.classList.add('bg-danger');
        return false;     
      } else {
      }
    }
    if(inputVar[0].parentElement.parentElement.className.includes('bg-danger')){
     // alert("Please clear the error caused by the field =  "+inputVar[0].name);
     // return false;
    }
  } -->
  var tagz = document.getElementById("HiddenTags");
<!--  Try block for checking the value in HiddenTags -->
      <!-- try{
		if(tagz){
			if (tagz.value) {
            var tmpArr = (JSON.parse(tagz.value)).tmpArr;
			// first check if all key values have been filled out
            for(var i=0; tmpArr.length > i;i++){
              if(Object.keys(tmpArr[i]).length>0){
              Object.keys(tmpArr[i]).forEach(function(key) {
                if(!tmpArr[i][key]){
					console.log("No value for " + key + " in Tags");
                    isValid= false;
                    return isValid;
                  }
                });
                if(!isValid){
                  break;
                  }
              }
            }
			// now check if they are duplicates
			var tmpTags=[];
			for (var i = 0; tmpArr.length > i; i++){
			  tmpTags.push(tmpArr[i]["Key"] + tmpArr[i]["Value"] );
			}
			console.log(tmpTags);
			var counts = [];
			for(var i = 0; tmpTags.length > i; i++) {
				if(counts[tmpTags[i]] === undefined) {
					counts[tmpTags[i]] = 1;
					tagz.parentElement.classList.remove("bg-danger");
					tagz.nextSibling.innerHTML='';
				} else {
					console.log('duplicate key values found' + JSON.stringify(tmpTags));
					tagz.parentElement.classList.add("bg-danger");
					tagz.nextSibling.innerHTML='Please use unique key value pairs';					
					return false;
				}
			}
          }
		}
          
      }catch(err){
        console.log("Error = "+err.message);
      }  -->
  <!-- if(document.getElementById("timeDIV").className.includes("bg-danger")){
    alert("The Time format is invalid");
    return false;
  } -->
  return isValid;
}
  
<!-- ****** Function to add rows during Run-time in Tags field ***** -->
function addRows(){
  document.getElementById("tagsContainer").parentElement.classList.add("bg-aws-color");
  <!--  Find the key for each row = total existing rows + 1 since before adding a row, the total is less by 1 -->
  var totalRows = 0;
  var keypairs = document.querySelectorAll("tr[id^='keypair-']");
<!--  Get total rows -->
  if(keypairs) totalRows = keypairs.length;
  if(totalRows > 6) { alert('Sorry, we currently have a limit of 7 tags only'); return null;}
  var currentRow = totalRows + 1;
  var tr1String = "";
  tr1String = '<tr id="keypair-' 
      + currentRow + 
      '"> <td><div class="row"><div><label for="value-' 
      + currentRow + 
      '" class="col-form-label pull-left">Value *</label> <input name="value-' 
      + currentRow + 
      '" id="value-' 
      + currentRow + 
      '" type="text" placeholder="Value" pattern="^[a-zA-Z0-9\\s_./=+-]{1,255}$" minLength="1" maxLength="255" class="form-control input-md" onblur="validate($snowJQ(this));" onchange="updateTagsField();" required="required"/></div><div class="pull-left text-danger" style="display: none;" id="helptext"></div></div><div class="row"><div><label for="key-' 
      + currentRow + 
      '" class="col-form-label pull-left">Key *</label> <input name="key-' 
      + currentRow + 
      '" id="key-' 
      + currentRow + 
      '" type="text" placeholder="Key" pattern="^[a-zA-Z0-9\\s_./=+-]{1,255}$"  minLength="1" maxLength="255" class="form-control input-md" onblur="validate($snowJQ(this));" onchange="updateTagsField();"  required="required"/></div><div class="pull-left text-danger" style="display: none;" id="helptext"></div></div></td></tr>';
      <!-- Start the table -->
      tr1String += '<tr id="actions-row-' + currentRow + '"> <td>';
      if (totalRows == 0){
        <!--  only add the delete button -->
        tr1String += '<button id="delete_row-' + currentRow + '" class="btn btn-default" onclick="updateTagsField();"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>';
      } else {
            tr1String += '<button id="move_row_up-' + currentRow + '" class="btn btn-default" ><span class="glyphicon glyphicon-arrow-up" aria-hidden="true"></span></button>'
        tr1String += '<button id="move_row_down-' + currentRow + '" class="btn btn-default" disabled="true"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span></button>'
        tr1String += '<button id="delete_row-' + currentRow + '" class="btn btn-default" onclick="updateTagsField();"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>';    
      }
      <!--  End the table -->
      tr1String += '</td></tr>';
      
    document.getElementById("tagsContainer").querySelector("table tbody")
        .insertAdjacentHTML('beforeend',tr1String );
<!--       Get the previous row and enable its down arrow -->
      if (document.getElementById("move_row_down-" + totalRows)) document.getElementById("move_row_down-" + totalRows).disabled=false;
<!--      Attach delete eventlistener -->
      document.querySelector('#delete_row-'+ currentRow).onclick = 
        function(e) { 
        e.preventDefault();
          var node1 = this.parentElement.parentElement; <!--  gives the tr the button is in -->
<!--     need to disable the down arrow of previous row              -->
          var node2 = node1.previousElementSibling;  <!-- gives you the tr the key-value are in  --> 
          var node3 = node2.previousElementSibling;  <!-- gives you the tr the previous actions buttons are in  -->     
          node1.remove();  <!-- remove self -->
          node2.remove(); <!-- remove the keypair for this action button  -->
          var move_down_button = node3.querySelector("[id^='move_row_down-']");
          if (move_down_button) move_down_button.disabled="true"; // disable the down button  
          updateTagsField();
        }
<!--  Attach up row eventlistener -->
      if(document.querySelector('#move_row_up-'+ currentRow)) { 
        document.querySelector('#move_row_up-'+ currentRow).onclick = 
          function(e) {
          e.preventDefault();
          var parentNode = document.getElementById("tagsContainer").querySelector("table tbody");
          var node3 = document.querySelector('#actions-row-'+ totalRows);
          var node1 = node3.previousElementSibling;
          var node2 = node3.nextElementSibling;
          parentNode.insertBefore(node2, node1);
          parentNode.insertBefore(node3, node1);
          updateTagsField();
          }
      }
<!--  Attach down row eventlistener -->
      if(document.querySelector('#move_row_down-'+ currentRow)) { 
        document.querySelector('#move_row_down-'+ currentRow).onclick = 
          function(e) { 
          e.preventDefault();
          var parentNode = document.getElementById("tagsContainer").querySelector("table tbody");
          var node3 = document.querySelector('#actions-row-'+ currentRow);
          var node1 = node3.previousElementSibling;
          var node2 = node3.nextElementSibling;
          parentNode.insertBefore(node1, node2);
          parentNode.insertBefore(node2, node3);
          updateTagsField();
          }
      }
  updateTagsField();
}
  
<!-- **** Function to add the Key Value for the Tags Field  ***** -->
function updateTagsField(){
    var keypairs = document.querySelectorAll("tr[id^='keypair-']");
    var totalRows = 0;
    if(keypairs) {totalRows = keypairs.length;}
    if (totalRows > 0 ){
      var finalArray= '{ "tmpArr" : [';
      for (var i = 0; totalRows > i; i++) {
       var key = keypairs[i].querySelector('input[name^=key]');
       if (key) {key = (key.value) ? key.value : "";}
       var val = keypairs[i].querySelector('input[name^=value]');
       if (val) {val = (val.value) ? val.value : "";}
       finalArray += '{ "Key":"' + key + '" , "Value":"' + val + '" }'
       if (i != (keypairs.length -1)) finalArray += ',';
      };
      finalArray += ']}';
      var tmp = {"Tags" : JSON.parse(finalArray) };
      document.getElementById("HiddenTags").value = finalArray;
    }else{
      document.getElementById("HiddenTags").value = '{ "tmpArr" : [{}]}';
    }
    updateRfcJsonValues();  
}
  <!-- ***** The main function to create the dynamic fields *****  -->
function buildHtmlTable(params,id) {
	  var ga = new GlideAjax('AMS_GetRFCFormHeaders');
	  ga.addParam('sysparm_name', 'getHeaders');
	  ga.addParam('sysparm_changeTypeId', id);
	  ga.getXMLWait();
	  var results = ga.getAnswer();
	  var headings = JSON.parse(results);
	  headings.push("NoParent");
	
      var bodyDiv = document.getElementById('bodyDiv');
<!--  Try block for removing the dynamically created form, which will not be their for the first time. -->
    try {
      $snowJQ("dynForm").remove(); <!-- If the form is created, remove it -->
    }
    catch(err) {
      console.log('Nothing to remove ' + err.message);
    }
<!--  Create the main Form formX-->
    var formX = document.createElement("form");
    formX.setAttribute("id", "dynForm");
<!--    Create DIV for Start Time -->
    var startTimeContainer = document.createElement("div");
    startTimeContainer.setAttribute("class", "row");
    startTimeContainer.setAttribute("id", "startTimeContainer");
    var startTimeContainerRow = document.createElement("div");
    startTimeContainerRow.setAttribute("class", "col-xs-12");
    startTimeContainerRow.innerHTML='<h2>Start time</h2><hr />';
    startTimeContainer.appendChild(startTimeContainerRow);
    var startTimeContainerRowDiv = document.createElement("div");
    startTimeContainerRowDiv.setAttribute("class", "col-xs-12");
    startTimeContainerRowDiv.innerHTML = 
    '<div class="col-xs-12 requiredID properties">\
      <div class="radio">\
        <label>\
          <input type="radio" id="asapOption" value="true" checked="true" data-toggle="collapse" name="timeZone" data-target="#startTimDiv"/>ASAP (10 minutes after RFC is submitted)\
        </label>\
      </div>\
      <div class="radio">\
        <label>\
          <input type="radio" value="false" data-toggle="collapse" id="timeZone" name="timeZone" data-target="#startTimDiv"></input>Scheduled</label>\
      </div>\
    </div>\
    <div class="col-xs-12 properties">\
      <div class="col-xs-12 collapse" id="startTimDiv">\
		  <div class="col-sm-4 date">\
			  <div class="input-group date" id="datePicker" >\
				  <input type="text" class="form-control" id="startDate" name="startDate"/><span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>\
			  </div>\
			  <div class="text-danger" style="display: none" id="helptext"></div>\
		  </div>\
		  <!--div class="col-sm-2" id="timeDIV">\
			  <div class="input-group">\
				<input class="form-control" id="time" name="time" placeholder="00:00" maxlength="5" onchange="checkDate($snowJQ(this))"/>\
			  </div>\
			<div class="text-danger" style="display: none" id="helptext">Invalid Time </div>\
			</div-->\
		  <div class="col-sm-4">\
			  <div class="input-group">\
				<select class="form-control" id="timezones" name="timezones" placeholder="Timezones"/>\
			  </div>\          
		  </div>\
		  <div class="col-sm-4">\
			  <span style="display:flex; align-items:left;top:0px;" class="col-sm-6 pull-left glyphicon glyphicon-info-sign " data-toggle="tooltip" title="The start date must be at least 10 minutes after the time of RFC submission."></span>\
		  </div>\
		  <div><input type="hidden" name="requestedStartTime" id="requestedStartTime"/></div>\
		  <div><input type="hidden" name="requestedEndTime" id="requestedEndTime"/></div>\		  
      </div>\
	 </div>';
  	
  
    startTimeContainer.appendChild(startTimeContainerRowDiv);
    formX.appendChild(startTimeContainer);
<!-- ***** Description container rfcDescriptionContainer ***** -->
    var rfcDescriptionContainer = document.createElement("div");
    rfcDescriptionContainer.setAttribute("class", "row");
    rfcDescriptionContainer.setAttribute("id", "rfcDescriptionContainer");
    var rfcDescriptionContainerRow = document.createElement("div");
    rfcDescriptionContainerRow.setAttribute("class", "col-xs-12");
    rfcDescriptionContainerRow.innerHTML = '<div class="row heading">\
         <div class="col-sm-5"><h2>RFC description</h2></div>\
         <div class="col-sm-4">\
            <div class="switch-wrap">\
               <label class="col-sm-4" for="md-switch-on">Basic</label>\
               <div class="switch col-sm-4">\
                  <input type="radio" data-toggle="collapse" data-target=".optionalIDHeaders" name="md-switch" id="md-switch-off" checked="true" />\
                  <input type="radio" data-toggle="collapse" data-target=".optionalIDHeaders" name="md-switch" id="md-switch-on" />\
                  <span class="switch-toggle" />\
               </div>\
               <label for="md-switch-off" class="col-sm-4">Advanced</label>\
            </div>\
         </div>\
         <div class="col-sm-1 pull-left"><span class="justify-center glyphicon glyphicon-info-sign" style="height:40px; justify-content:center;" data-toggle="tooltip" title="Basic and advanced view of rfc creation." /></div>\
      </div><div><hr/></div>\
      <div class="form-group requiredID properties">\
         <div class="col-sm-4"><label class="pull-right col-form-label" for="Subject">Subject*</label></div>\
         <div class="col-sm-7">\
            <input type="text" required="required" class="form-control" rows="5" paramType="text" name="Subject" id="Subject" onblur="validate($snowJQ(this))"  onchange="updateRfcJsonValues()"/>\
         </div>\
     <div class="col-sm-8 col-md-offset-4 text-danger" style="display: none" id="helptext"/>\
      </div>\
      <div class="form-group bg-info optionalIDHeaders properties collapse">\
         <div class="col-sm-4"><label class="pull-right col-form-label" for="description">Description</label></div>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" paramType="text" name="description" id="advncDescription" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalIDHeaders properties collapse">\
         <div class="col-sm-4"><label class="pull-right col-form-label" for="worstCasesScenario">Worst-case scenario</label></div>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" paramType="text" name="worstCasesScenario" id="worstCasesScenario" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalIDHeaders properties collapse">\
         <div class="col-sm-4"><label class="pull-right col-form-label" for="implementationPlan">Implementation plan</label></div>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" paramType="text" name="implementationPlan" id="implementationPlan" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalIDHeaders properties collapse">\
         <div class="col-sm-4"><label class="pull-right col-form-label" for="rollbackPlan">Rollback plan</label></div>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" paramType="text" name="rollbackPlan" id="rollbackPlan" onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>\
      <div class="form-group bg-info optionalIDHeaders properties collapse">\
         <div class="col-sm-4"><label class="pull-right col-form-label" for="expectedOutcome">Expected outcome</label></div>\
         <div class="col-sm-7">\
            <textarea class="form-control" rows="5" paramType="text" name="expectedOutcome" id="expectedOutcome"  onchange="updateRfcJsonValues()"/>\
         </div>\
      </div>';
    rfcDescriptionContainer.appendChild(rfcDescriptionContainerRow);
    formX.appendChild(rfcDescriptionContainer);   
<!-- *****  Resource Information container resourceInformationContainer **** -->
    var resourceInformationContainer = document.createElement("div");
    resourceInformationContainer.setAttribute("class", "row");
    resourceInformationContainer.setAttribute("id", "resourceInformationContainer");
    var resourceInformationContainerRow = document.createElement("div");
    resourceInformationContainerRow.setAttribute("class", "col-xs-12");
    resourceInformationContainerRow.innerHTML='<h2>Resource information</h2><hr />';
    resourceInformationContainer.appendChild(resourceInformationContainerRow);
<!-- ***  Parameters Container parameterContainer  *****  -->
    <!-- var parameterContainer= document.createElement("div");
    parameterContainer.setAttribute("class", "row");
    parameterContainer.setAttribute("id", "parameterContainer");
    var parameterContainerRow = document.createElement("div");
    parameterContainerRow.setAttribute("class", "col-xs-12");
    parameterContainer.appendChild(parameterContainerRow); -->
<!-- **** Fields which are not under any headers or with no parent **** -->
	var noParentFieldContainer = document.createElement("div");
	noParentFieldContainer.setAttribute("class", "row");
	var noParentFieldContainerRow = document.createElement("div");
	noParentFieldContainerRow.setAttribute("class", "col-xs-12");
<!-- ****  GlideAjax call to get the headers  *****  -->
    for(var j=0;headings.length>j;j++){
      var heading=headings[j];
      var headingMainContainer= document.createElement("div");
      headingMainContainer.setAttribute("class","optionalIDHeaders properties collapse");
      var headingContainerRow = document.createElement("div");
      <!-- headingContainerRow.setAttribute("class", "col-xs-12"); -->
      headingContainerRow.innerHTML='<h3>'+heading+'</h3><hr />';
      headingMainContainer.setAttribute("id",heading);
	
<!-- **** Loop the params map to create the field ***** -->
    for (var i = 0; Object.keys(params).length > i; i++) {
      var tmp = params[Object.keys(params)[i]];
      var inputType;
	  //if (tmp.paramName == 'Textarea') console.log(JSON.stringify(tmp));
<!-- **** Switch case for the data type while creating fields  **** -->
      switch (tmp.paramType) {
        case "string":
          if(tmp.maxLength > 255) {
			inputType = "textarea";
		  } else if (tmp.snowParamType === "String" ){
            inputType = "text";
          } else if (tmp.snowParamType === "Choice" || tmp.snowParamType=== "Reference"){
            inputType = "select";
          }     
          break;
        case "array":
          if(tmp.snowParamType === "Reference"){
             inputType = "select";
          } else if(tmp.paramName === "Tags"){
             inputType = "select-multiple"
          } else{
            inputType = "List";
          }
          break;
        case "number":
          inputType = "number"
          break;
        case "integer":
          inputType = "number"
          break;
        case "boolean":
          inputType = "boolean";
          break;
		default:
          inputType = "text"

      }
<!-- **** The Parent Div of the field  ***** -->
      var divX = document.createElement("div");
      var collapseOrNot = (tmp.mandatory != "true") ? "collapse" : "";
      var optionalOrRequiredID = (tmp.mandatory != "true") ? "optionalIDHeaders" : "requiredID";
      var optionalFieldBG = (tmp.mandatory != "true") ? " bg-info " : "";
      divX.setAttribute("class", "form-group" + optionalFieldBG + " " + optionalOrRequiredID + " " + collapseOrNot + " " + tmp.awsParamType);
        
      var str = "";
      var mand = (tmp.mandatory === "true") ? "*" : "";
      <!-- var mandStr = (tmp.mandatory === "true") ? "required" : ""; -->
      str += '<div class="col-sm-4"><label class="pull-right col-form-label" for="' + tmp.paramName + '">' + tmp.paramName + mand + '</label></div>';
  
      var additionalTypes="";
      if (tmp.default) additionalTypes += 'placeholder="' + tmp.default + '" ';
      if (tmp.minimum) additionalTypes += 'min="' + tmp.minimum + '" ';
      if (tmp.maximum) additionalTypes += 'max="' + tmp.maximum + '" ';
      if (tmp.pattern) additionalTypes += 'pattern="' + tmp.pattern + '" ';
      if (tmp.mandatory) additionalTypes += 'required="required" ';
  
      if(tmp.paramName === "StackTemplateId"){
        divX.setAttribute("class","form-group bg-info optionalIDHeaders properties collapse");
       }
  
  
<!-- ***** Create field for data type text and number  ***** -->
      if (inputType === 'text' || inputType === 'number') {             
        if(tmp.pattern){
          str += '<div class="col-sm-7" >';
          str += '<input type="' 
          + inputType + 
          '" step="0.01" class="form-control" name="' 
          + tmp.paramName + 
          '" id="' 
          + tmp.paramName + 
          '" value="' 
          + tmp.default + 
          '"  min="' 
          + tmp.minimum + 
          '" max="' 
          + tmp.maximum + 
          '" onblur="validate($snowJQ(this))" onchange="updateRfcJsonValues()" pattern="' 
          + tmp.pattern +
          '" paramType="' 
          + tmp.paramType + 
          '" maxlength="' 
          + tmp.maxLength + 
          '" minlength="' 
          + tmp.minLength +
          '" /></div>';
        } else {
          str += '<div class="col-sm-7" >';
          str += '<input type="' 
          + inputType + 
          '" step="0.01" class="form-control" name="' 
          + tmp.paramName + 
          '" id="' 
          + tmp.paramName + 
          '" value="' 
          + tmp.default + 
          '"  min="' 
          + tmp.minimum + 
          '" max="' 
          + tmp.maximum + 
          '" onblur="validate($snowJQ(this))" onchange="updateRfcJsonValues()" paramType="' 
          + tmp.paramType +
          '" maxlength="' 
          + tmp.maxLength + 
          '" minlength="' 
          + tmp.minLength + 
          '" /></div>';
          }
      }
	
	if (inputType === 'textarea') {             
          str += '<div class="col-sm-7" >';
          str += '<textarea class="form-control" name="' 
          + tmp.paramName + 
          '" id="' 
          + tmp.paramName + 
          '" value="' 
          + tmp.default + 
          '" onblur="validate($snowJQ(this))" onchange="updateRfcJsonValues()" paramType="' 
          + tmp.paramType + 
          '" maxlength="' 
          + tmp.maxLength + 
          '" /></div>';
        }	
<!-- ***** Create field for the boolean data type  ***** -->
      if (inputType === 'boolean') {            
        if(tmp.snowParamType == 'True/False'){
          var checkedStr = ((tmp.default === true) ? true: false);
          str += '<div class="col-sm-7"><div class="radio"><label><input id="' 
          + tmp.paramName + 
          '" type="radio" paramType="' 
          + tmp.paramType + 
          '" name="' 
          + tmp.paramName + 
          '" value="true" checked="'
          + checkedStr + 
          '" onblur="validate($snowJQ(this))"  onchange="updateRfcJsonValues()">true</input></label></div>';
          
          str += '<div class="radio"><label><input type="radio" paramType="' 
          + tmp.paramType + 
          '" name="'
          + tmp.paramName + 
          '" value="false" checked="'
          + checkedStr + 
          '">false</input></label></div></div>';
        }
      }
<!-- ***** Create field for the Tags Field  **** -->
      if (inputType === 'select-multiple'){
        str += '<div class="row" id="tagsContainer" name="tagsContainer">';
        str +=   '<div class="row" id="tagsTableRow" name="tagsTableRow">';
        str +=    '<div class="col-md-4 column">';
        str +=      '<table class="table bg-aws-color" id="keypair-table">';
        str +=        '<tbody>';
        str +=                '<tr><td><input type="hidden" name="HiddenTags" id="HiddenTags" class="hidden-row"></input>';
		str +=                '<div class="col-sm-8 col-md-offset-2 text-danger" style="display: block" id="helptext"></div></td></tr>';	
        str +=        '</tbody>';
        str +=      '</table>';
        str +=    '</div>';
        str +=  '</div>';
        str +=  '<button id="add_row" type="button" class="btn btn-default pull-left" onclick="addRows()"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></button>';
        str += '</div><div class="col-sm-8 col-md-offset-4 text-danger" style="display: none" id="helptext"/>';
      }
<!-- ***** Create field for the Drop-down Field ***** -->
      if (inputType === 'select'){
         if(tmp.snowParamType !== "Reference") {
           if(tmp.paramName === "StackTemplateId"){
             str += '<div class="col-sm-7"><div class="radio"><label><input id="' 
             + tmp.paramName + 
             '" paramType="' 
             + tmp.paramType + 
             '" name="' 
             + tmp.paramName + 
             '" type="radio" value="' 
             + tmp.num + 
             '" checked="checked">'
             + tmp.num + 
             '</input></label></div></div>';
            } else {
            var options = tmp.num.split(',');
            var optionStr = '';
            options.forEach( (option) => {
              if(tmp.default == option) {
                optionStr += '<option value="' 
                      + option + 
                      '" selected="true">' 
                      + option + 
                      '</option>'
              } else { 
                optionStr += '<option value="' + option + '" >' 
                      + option + 
                      '</option>' 
                } 
            });
            str += '<div class="col-sm-7" id="'
              + tmp.paramName +
              '"><select class="form-control" id="'
              + tmp.paramName +
              '"  paramType="' 
              + tmp.paramType + 
              '" name="'
              + tmp.paramName +
              '" value="'
              + tmp.default +
              '">'
              + optionStr +
              '</select></div>'; 
            }
        } else {
            //var addThis = (tmp.paramType === "array") ? "select-multiple" : "";

            str += '<div class="col-sm-4"><input id="' 
              + tmp.paramName + 
              '"  paramType="' 
              + tmp.paramType + 
              '" name="' 
              + tmp.paramName + 
              '" type="' 
              + tmp.paramType + 
              '" class="form-control" readonly="true"  minItems="' 	
              + tmp.minItems + 
              '" maxItems="' 
              + tmp.maxItems + 
              '" onblur="validate($snowJQ(this))"></input></div> ';
			
			  
            var commonGA;
            <!-- *** SNOW Ajax calls depending upon the param name **** -->
            if (tmp.paramName == 'VpcId') {
			  console.log('Calling reference data for VpcId........');
              commonGA = new GlideAjax('AMS_GetResources');
              commonGA.addParam('sysparm_name', 'getVpcs');
            }
            if (tmp.paramName == 'StackIds' || tmp.paramName == 'StackId') {
			  console.log('Calling reference data for StackIds........');	
              commonGA = new GlideAjax('AMS_GetResources');
              commonGA.addParam('sysparm_name', 'getStacks');
            }
            if (tmp.paramName == 'AmiId') {
			  console.log('Calling reference data for AmiId........');	
              commonGA = new GlideAjax('AMS_GetResources');
              commonGA.addParam('sysparm_name', 'getAmis');
            }
            if (tmp.paramName.includes("Subnet")) {
			  console.log('Calling reference data for Subnet........');	
              commonGA = new GlideAjax('AMS_GetResources');
              commonGA.addParam('sysparm_name', 'getSubnets');
            }
              commonGA.getXMLWait();
              var responseXML = commonGA.getAnswer();
              var options = responseXML.split(',');

              var paramName = tmp.paramName;
              var optionStr = '<option value="" selected="true">' + 'none' + '</option>';
              options.forEach( (option) =>
                 optionStr += '<option value="' + option + '" >' + option + '</option>' );

             str += '<div class="col-sm-2"><select class="form-control" onchange="addIds(this, this.value); updateRfcJsonValues(); validateArrays(this);" name="' 
               + tmp.paramName +
               '" id="' 
               + tmp.paramName +
               '-select"> ' 
               + optionStr + 
               '</select></div>';
            str += '<button type="button" onclick="clearAll(this.name); updateRfcJsonValues(); validateArrays(this);" name="' 
              + tmp.paramName +
              '" class="btn btn-default">Clear All</button>';
         }
      }
<!-- **** Create field for Drop-Down with multiple selection  **** -->
      if(inputType === 'List'){
        if (tmp.paramName === 'SubnetIds') {
           str += '<div class="col-sm-4"><div><label><input id="' 
             + tmp.paramName + 
             '"  paramType="' 
             + tmp.paramType + 
             '" name="' 
             + tmp.paramName + 
             '" type="text" value="' 
             + tmp.num + 
             '" class="form-control"  onblur="validate($snowJQ(this))" ></input></label></div></div> ';
           
		   var commonGA = new GlideAjax('AMS_GetResources');
           commonGA.addParam('sysparm_name', 'getSubnets');
           commonGA.getXMLWait();
           var responseXML = commonGA.getAnswer();
           var options = responseXML.split(',');
           var optionStr = '<option value="" selected="true">' 
           + 'none' + 
          '</option>';
           options.forEach( (option) =>
             optionStr += '<option value="' + option + '">' + option + '</option>' );
  
           str += '<div class="col-sm-2" id="' 
             + tmp.paramName + 
             '" ><select class="form-control" id="' 
             + tmp.paramName + 
             '"  paramType="' + tmp.paramType + '" name="' 
             + tmp.paramName + 
             '"> ' 
             + optionStr + 
             '</select></div>';
         } else {
            if(tmp.pattern){
              str += '<div class="col-sm-7" >';
              str += '<input type="' 
                + inputType + 
                '" class="form-control" data-role="tagsinput" placeholder="Press enter after each word" name="' 
                + tmp.paramName + 
                '" id="' 
                + tmp.paramName + 
                '" value="' 
                + tmp.default + 
                '"  min="' 
                + tmp.minimum + 
                '" max="' 
                + tmp.maximum + 
                '" onblur="validateArrays(this);" onchange="updateRfcJsonValues();" 
                pattern="' 
                + tmp.pattern + 
                '" paramType="' 
                + tmp.paramType + 
                '" minItems="' 
                + tmp.minItems + 
                '" maxItems="' 
                + tmp.maxItems + 
                '" /></div>';
            } else {
                str += '<div class="col-sm-7">';
                str += '<input data-role="tagsinput" placeholder="Press enter after each word" type="text" class="form-control" name="' 
                + tmp.paramName + 
                '" id="' 
                + tmp.paramName + 
                '" value="' 
                + tmp.default + 
                '"  min="' 
                + tmp.minimum + 
                '" max="' 
                + tmp.maximum + 
                '" onblur="validateArrays(this);" onchange="updateRfcJsonValues();" 
                paramType="' 
                + tmp.paramType + 
                '" minItems="' 
                + tmp.minItems + 
                '" maxItems="' 
                + tmp.maxItems + 
                '"/></div>';
              }
        }
      }
       
      str += '<span style="display:flex; align-items:center;height: 40px;" class="col-sm-1 pull-right glyphicon glyphicon-info-sign" data-toggle="tooltip" title="' + tmp.description + '" />';
      str += '<div class="col-sm-8 col-md-offset-4 text-danger" style="display: none" id="helptext"/>';
      divX.innerHTML = str;

    if(tmp.parentName == heading){
		headingContainerRow.appendChild(divX);
		headingMainContainer.appendChild(headingContainerRow);
		resourceInformationContainer.appendChild(headingMainContainer);
	}else if(tmp.parentName == ""){
		if(headings[j] == headings[0]){
			if(tmp.paramName === 'Description' || tmp.paramName === 'StackTemplateId'){
				resourceInformationContainerRow.appendChild(divX);
			 }else{
				noParentFieldContainerRow.appendChild(divX);
				noParentFieldContainer.appendChild(noParentFieldContainerRow);
			}
		}
	}
 }
}
<!-- **** RFC JSON Field DIV  *****-->
    var rfcJsonContainer = document.createElement("div");
    rfcJsonContainer.setAttribute("class", "row optionalIDHeaders collapse");
    rfcJsonContainer.setAttribute("id", "rfcJsonContainer");
    var rfcJsonContainerRow = document.createElement("div");
    rfcJsonContainerRow.setAttribute("class", "col-xs-12");
    rfcJsonContainerRow.innerHTML='<h2>RFC JSON</h2><hr/>\
    <div class="col-xs-12 optionalIDHeaders collapse" >\
        <textarea class="form-control" rows="5" name="rfcJson" id="rfcJson" readonly="true" ></textarea>\
    </div>\
    ';
    rfcJsonContainer.appendChild(rfcJsonContainerRow);  
    formX.appendChild(resourceInformationContainer);<!--  Add the Resource Container to the main Form -->
    //formX.appendChild(parameterContainer); <!-- Next Add the parameter container to the main Form -->
	formX.appendChild(noParentFieldContainer); <!-- Add the No parent container to the main Form  -->
    formX.appendChild(rfcJsonContainer); <!-- Next Add the RFC JSON to the main Form -->
    bodyDiv.appendChild(formX); <!-- Add the main form to the html body -->
    prepareDateTimePicker(); 
    //prepareSelectPickers();
    prepAllRequiredInputs();
	prepareArrayInputs();
    showOrHideHeaders(id);
    updateRfcJsonValues();
	
  }
  
function showOrHideHeaders(changeTypeID){
  var ga = new GlideAjax('AMS_GetRFCFormHeaders');
  ga.addParam('sysparm_name', 'getHeaders');
  ga.addParam('sysparm_changeTypeId', changeTypeID);
  ga.getXMLWait();
  var results = ga.getAnswer();
  var headings = JSON.parse(results);
  for(var x=0; headings.length > x; x++){
    var headDIV = document.getElementById(headings[x]);
    var len = headDIV.querySelectorAll(".requiredID");
      if(len.length>0){
        headDIV.setAttribute("class","col-xs-12 requiredID properties");
      }
    }
}
	
   </script>   
</j:jelly>]]></xml>
    </sys_ui_macro>
</record_update>
