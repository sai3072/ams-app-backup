<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="09ff3d105f231000b12e3572f2b4775d" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_138064_ams_incidents</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>AMS_CreateCaseforIncident</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var ccemails;
	//Get AMS resource object
	var createtest = new AMS_CaseFetch();
	//Check empty value for cc_emails
	if(current.u_case_cc_emails == '')
		ccemails = '';
	else
		ccemails = [current.u_case_cc_emails.toString()];
	//API call to create case
	var awsCaseId = createtest.createCaseAndInsert(current.u_case_category.toString(), ccemails, current.u_case_details.toString(), current.u_case_type.toString(), current.u_case_service_code.toString(), current.u_incidents_priority.u_incident_priority_code.toString(), current.u_case_subject.toString());
	
	
	//check whether api is failed or success
	if(awsCaseId != false){
		current.u_case_id = awsCaseId;
		gs.addInfoMessage('Incident successfully created - case Id = ' + awsCaseId);
		current.update();
		//Call to update Describe cases for current caseid
		var getAWSRecord = createtest.getDescribeCasesAndInsert('','',[current.u_case_id.toString()],'','','');
		if(getAWSRecord){
			//Update communication for current caseid
			var getAWSRecordComms = createtest.getCommunicationsAndInsert(current.u_case_id.toString());
			if(getAWSRecordComms){
				gs.addInfoMessage('Fetched case communications for - case Id = ' + awsCaseId);
				//control returns to form here.. but asynchronously
			} else {
				gs.addErrorMessage('Could not fetch case communications for - case Id = ' + awsCaseId);
			}
		} else {
			gs.addErrorMessage('Could not fetch case details for - case Id = ' + awsCaseId);
		}
		
	}
	else
		{
		//if creation failed abort the action
		gs.addErrorMessage('Incident creation failed');
		
		current.setAbortAction(true);
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>dasthagiri</sys_created_by>
        <sys_created_on>2017-06-28 08:59:33</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>09ff3d105f231000b12e3572f2b4775d</sys_domain>
        <sys_domain_path/>
        <sys_id>4e3383f64fe336403746aaa01310c778</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AMS_CreateCaseforIncident</sys_name>
        <sys_overrides/>
        <sys_package display_value="AMS" source="x_138064_ams">c370f2450f633200e1c38fbce1050e70</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AMS">c370f2450f633200e1c38fbce1050e70</sys_scope>
        <sys_update_name>sys_script_4e3383f64fe336403746aaa01310c778</sys_update_name>
        <sys_updated_by>dasthagiri</sys_updated_by>
        <sys_updated_on>2017-06-28 08:59:33</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=4e3383f64fe336403746aaa01310c778"/>
</record_update>
