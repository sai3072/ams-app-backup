<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="09ff3d105f231000b12e3572f2b4775d" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_138064_ams_rfcs</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>AMS_CreateRFC</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	//call the AMS_RfcFetch Api
	var amsRfc = new AMS_RfcFetch();
	var changeTypeId = current.u_rfcs_change_type_id;
	var changeTypeVersion;
	
	//check whether change type id is not empty or undefined
	if(changeTypeId != null && changeTypeId != undefined)
	{
		var rfcJson = JSON.parse(current.u_rfcs_execution_parameters);
		var executionParams = rfcJson;
		var params;
		
		//GlideRecord the changeTypeVersion table to get parameters and changeTypeVersion
		var changeTypeVersionGR = new GlideRecord('x_138064_ams_changetype_version');
		changeTypeVersionGR.addQuery('u_rfc_change_type_version_changetypeid',changeTypeId);
		changeTypeVersionGR.query();
		
		if(changeTypeVersionGR.next())
		{
			params = JSON.parse(changeTypeVersionGR.u_rfc_change_type_version_parameters);
			changeTypeVersion = changeTypeVersionGR.u_rfc_change_type_version_version.toString();
			
			//format the rfcJson as execution input schema
			Object.keys(params).forEach(function(key)
			{
				if(params[key].type == 'object')
				{
					//Go inside propetries and again search for object
					Object.keys(params[key].properties).forEach(function(key2) 
				    {
						var parmInsideObject = params[key].properties[key2];
						if(parmInsideObject.type == 'object')
						{
							//Go inside propetries of parmInsideObject and again search for object
							Object.keys(parmInsideObject.properties).forEach(function(insidekey) 
							{
								var parmInsideObjectInsideObject = parmInsideObject.properties[insidekey];
								if(parmInsideObjectInsideObject.type == 'object')
								{
									Object.keys(parmInsideObjectInsideObject.properties).forEach(function(insideInsidekey)
									{
										// assign the value to object
										parmInsideObjectInsideObject.properties[insideInsidekey] = executionParams.Parameters[insideInsidekey];
									});
									parmInsideObjectInsideObject=parmInsideObjectInsideObject.properties;
								}
								//if its not object then assign the value to object
								else
								{
									parmInsideObjectInsideObject =  executionParams.Parameters[insidekey];
								}
								parmInsideObject.properties[insidekey] = parmInsideObjectInsideObject;
							});
							parmInsideObject = parmInsideObject.properties;
						}
						//if its not object then assign the value to object
						else
						{
							parmInsideObject = executionParams.Parameters[key2];
							
						}
						params[key].properties[key2] = parmInsideObject;
					});
					params[key] = params[key].properties;
					
				}
				//if its not object then assign the value to object
				else
				{
					params[key] = executionParams[key];
				}
			});
		}
		var jsonParam = JSON.stringify(params);
		//call the createRFC api
		var isRfcCreated = amsRfc.createRfc(
		rfcJson.description,
		rfcJson.expectedOutcome,
		rfcJson.implementationPlan,
		rfcJson.requestedStartTime,
		rfcJson.requestedEndTime,
		rfcJson.rollbackPlan,
		rfcJson.Subject,
		rfcJson.worstCasesScenario,
		changeTypeId.toString(),
		changeTypeVersion,
		jsonParam ) ;
		//if rfc successfully created then field with rfcid
		if(isRfcCreated.RfcId != undefined){
			current.u_rfcs_id = isRfcCreated.RfcId;
			gs.addInfoMessage("Rfc created "+isRfcCreated.RfcId);
			amsRfc.submitRfc(current.u_rfcs_id.toString());
			//amsRfc.getRfcAndInsert(current.u_rfcs_id.toString());
			current.u_rfcs_aws_create_status = "success";
		}
		//if rfc creation failed
		else
		{
			//show the error message on the form
			gs.addErrorMessage('create Rfc failed '+isRfcCreated.errorMessage);
			//set aws status to failed
			current.u_rfcs_aws_create_status = "failed";
			current.u_rfcs_request_failure_reason = isRfcCreated.errorMessage;
		}
		current.update();
	}
	else
	{
		gs.addErrorMessage('No Change Type Id Found');
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>dasthagiri</sys_created_by>
        <sys_created_on>2017-06-28 08:53:04</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>09ff3d105f231000b12e3572f2b4775d</sys_domain>
        <sys_domain_path/>
        <sys_id>57c18b764fe336403746aaa01310c7d8</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>AMS_CreateRFC</sys_name>
        <sys_overrides/>
        <sys_package display_value="AMS" source="x_138064_ams">c370f2450f633200e1c38fbce1050e70</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AMS">c370f2450f633200e1c38fbce1050e70</sys_scope>
        <sys_update_name>sys_script_57c18b764fe336403746aaa01310c7d8</sys_update_name>
        <sys_updated_by>dasthagiri</sys_updated_by>
        <sys_updated_on>2017-06-28 09:37:36</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=57c18b764fe336403746aaa01310c7d8"/>
</record_update>
